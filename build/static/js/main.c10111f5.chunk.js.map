{"version":3,"sources":["resources/0.png","resources/wild.png","resources/loading.png","resources/forehand.png","resources/backhand.png","resources/roller.png","resources/hyzer.png","resources/anhyzer.png","resources/driver.png","resources/mid.png","resources/putter.png","resources/overstabile.png","resources/understable.png","Components/Dice.tsx","Pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Dice","header","active","options","className","src","getRandomInt","max","Math","floor","random","Home","useState","diceOneChoice","setDiceOneChoice","diceTwoChoice","setDiceTwoChoice","dices","putter","mid","overstable","understable","driver","wild","loading","forehand","backhand","roller","hyzer","anhyzer","id","Button","variant","block","onClick","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,4MCqB5BC,G,MAZmB,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAEhD,OACI,yBAAKC,UAAU,QACX,4BAAKH,GACL,yBAAKG,UAAU,UACX,4BAAI,yBAAKC,IAAKF,EAAQD,U,sOCgCtC,SAASI,EAAaC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAGlCI,MAhCY,WAAO,IAAD,EACaC,mBAAS,GADtB,mBACtBC,EADsB,KACPC,EADO,OAEaF,mBAAS,GAFtB,mBAEtBG,EAFsB,KAEPC,EAFO,KAc7B,OACI,yBAAKZ,UAAU,QACX,8CACA,yBAAKA,UAAU,SACX,kBAAC,EAAD,CAAMH,OAAQ,cAAeC,OAAQW,EAAeV,QAAS,CAACc,IAAOC,IAAQC,IAAKC,IAAYC,IAAaC,IAAQC,IAAMC,OACzH,kBAAC,EAAD,CAAMvB,OAAQ,cAAeC,OAAQa,EAAeZ,QAAS,CAACc,IAAOQ,IAAUC,IAAUC,IAAQC,IAAOC,IAASN,IAAMC,QAE3H,yBAAKM,GAAG,UACJ,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOC,OAAK,EAACC,QAlBjB,WACpBpB,EAAiB,GACjBE,EAAiB,GAEjBmB,YAAW,WACPrB,EAAiBR,EAAa,GAAG,GACjCU,EAAiBV,EAAa,GAAG,KAC9B,OAWC,gB,MC9BD8B,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c10111f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.64ad05ac.png\";","module.exports = __webpack_public_path__ + \"static/media/wild.e14f4a7b.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.65574002.png\";","module.exports = __webpack_public_path__ + \"static/media/forehand.b755f77e.png\";","module.exports = __webpack_public_path__ + \"static/media/backhand.70a4f148.png\";","module.exports = __webpack_public_path__ + \"static/media/roller.a13213b9.png\";","module.exports = __webpack_public_path__ + \"static/media/hyzer.61066173.png\";","module.exports = __webpack_public_path__ + \"static/media/anhyzer.e1f60cbe.png\";","module.exports = __webpack_public_path__ + \"static/media/driver.4ed98be7.png\";","module.exports = __webpack_public_path__ + \"static/media/mid.f1482590.png\";","module.exports = __webpack_public_path__ + \"static/media/putter.d6a4a069.png\";","module.exports = __webpack_public_path__ + \"static/media/overstabile.056653c4.png\";","module.exports = __webpack_public_path__ + \"static/media/understable.60d04e5b.png\";","import React from \"react\";\nimport \"./Dice.scss\"\n\ntype DiceProps = {\n    header: string,\n    active: number,\n    options: string[]\n}\n\nconst Dice: React.FC<DiceProps> = ({header, active, options}) => {\n\n    return (\n        <div className=\"Dice\">\n            <h4>{header}</h4>\n            <div className=\"Square\">\n                <h5><img src={options[active]}/></h5>\n            </div>\n        </div>\n    )\n};\n\nexport default Dice\n","import React, {useState} from 'react'\nimport Dice from \"../Components/Dice\";\nimport Button from 'react-bootstrap/Button'\nimport dices from \"../resources/0.png\"\nimport forehand from \"../resources/forehand.png\"\nimport backhand from \"../resources/backhand.png\"\nimport roller from \"../resources/roller.png\"\nimport wild from \"../resources/wild.png\"\nimport hyzer from \"../resources/hyzer.png\"\nimport anhyzer from \"../resources/anhyzer.png\"\nimport driver from \"../resources/driver.png\"\nimport mid from \"../resources/mid.png\"\nimport putter from \"../resources/putter.png\"\nimport overstable from \"../resources/overstabile.png\"\nimport understable from \"../resources/understable.png\"\nimport loading from \"../resources/loading.png\"\n\nimport \"./Home.scss\"\n\nconst Home: React.FC<{}> = () => {\n    const [diceOneChoice, setDiceOneChoice] = useState(0);\n    const [diceTwoChoice, setDiceTwoChoice] = useState(0);\n\n    const onClickDiceRoll = () => {\n        setDiceOneChoice(7);\n        setDiceTwoChoice(7);\n\n        setTimeout(function(){\n            setDiceOneChoice(getRandomInt(5)+1);\n            setDiceTwoChoice(getRandomInt(5)+1);\n            }, 1000)\n    }\n\n    return (\n        <div className=\"Home\">\n            <h1>DISC GOLF DICE</h1>\n            <div className=\"dices\">\n                <Dice header={\"DISC CHOISE\"} active={diceOneChoice} options={[dices, putter, mid, overstable, understable, driver, wild, loading ]} />\n                <Dice header={\"SHOT CHOISE\"} active={diceTwoChoice} options={[dices, forehand, backhand, roller, hyzer, anhyzer, wild, loading]} />\n            </div>\n            <div id=\"button\">\n                <Button variant=\"dark\" block onClick={onClickDiceRoll}>ROLL DICE</Button>\n            </div>\n        </div>\n    )\n};\n\nfunction getRandomInt(max: number) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default Home\n","import React from 'react';\nimport './App.css';\nimport Home from \"./Pages/Home\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}